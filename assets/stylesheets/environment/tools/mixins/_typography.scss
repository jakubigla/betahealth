// Typographic scale helpers

/// Type scale
/// ----------
/// Return the font size associated with a type scale at
/// a certain screen size
///
/// @prop {number} level - level on the type scale
/// @prop {string} size [desktop] - screen size to return
///
/// @return {string} the font size from type scale map
///
/// @example scss - Sass usage with default screen size
///   h1 {
///     font-size: type-scale(0);
///   }
///
/// @example scss - Sass usage to get mobile size
///   h1 {
///     font-size: type-scale(0, "mobile");
///   }
@function type-scale($level, $size: "desktop") {
  @return map-get(map-get(map-get($type-settings, $level), $size), "font-size");
}

/// Line height
/// -----------
/// Return the line height associated with a type scale at
/// a certain screen size
///
/// @prop {number} level - level on the type scale
/// @prop {string} size [desktop] - screen size to return
///
/// @return {string} the line height from type scale map
///
/// @example scss - Sass usage with default screen size
///   h1 {
///     line-height: line-height(0);
///   }
///
/// @example scss - Sass usage to get mobile value
///   h1 {
///     font-size: line-height(0, "mobile");
///   }
@function line-height($level, $size: "desktop") {
  @return map-get(map-get(map-get($type-settings, $level), $size), "line-height");
}

/// Type setting
/// -------------
/// Output basic font settings for font usage
///
/// @access private
///
/// @prop {number} level - level on the type scale
/// @prop {number} font-weight [400] - thickness of font weight
@mixin _type-setting($level: 0, $font-weight: 400) {
  @if $is-print {
    font-family: $print-font-stack;
    font-size: type-scale($level, "print");
  } @else {
    font-family: $nhs-font-stack;
    font-size: type-scale($level, "mobile");
  }

  font-weight: $font-weight;
  line-height: line-height($level, "mobile");
  text-transform: none;

  @include media(tablet) {
    font-size: type-scale($level);
    line-height: line-height($level);
  }
}

/// Core font
/// -------------
/// Output font settings for one of the core font sizes
/// defined in $type-settings-map (typography.scss)
///
/// @access public
///
/// @prop {number} font-size - font size required (based on full desktop size)
///
/// @example scss - Set font size to 19px with normal weight
///   h1 {
///     @include core-font(19);
///   }
@mixin core-font($font-size) {
  @if map-has-key($type-settings-map, $font-size) {
    @include _type-setting(map-get($type-settings-map, $font-size));
  } @else {
    @warn "`#{$font-size}` is not a core font size. " +
      "See `settings/_typography.scss` for a list of valid sizes.";
  }
}

/// Bold font
/// -------------
/// Output font settings for one of the core font sizes
/// defined in $type-settings-map (typography.scss) but
/// use a bold font weight
///
/// @access public
///
/// @prop {number} font-size - font size required (based on full desktop size)
///
/// @example scss - Set font size to 19px with bold weight
///   h1 {
///     @include bold-font(19);
///   }
@mixin bold-font($font-size) {
  @if map-has-key($type-settings-map, $font-size) {
    @include _type-setting(map-get($type-settings-map, $font-size), $font-weight: 700);
  } @else {
    @warn "`#{$font-size}` is not a core font size. " +
      "See `settings/_typography.scss` for a list of valid sizes.";
  }
}
